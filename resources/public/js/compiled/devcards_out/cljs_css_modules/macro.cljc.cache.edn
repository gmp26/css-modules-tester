;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name cljs-css-modules.macro, :imports nil, :requires {garden.core garden.core, cljs-css-modules.runtime cljs-css-modules.runtime}, :uses {css garden.core}, :defs {selectors-to-localise {:name cljs-css-modules.macro/selectors-to-localise, :file "resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :line 11, :column 1, :end-line 11, :end-column 27, :meta {:file "/Users/gmp26/clojure/css-modules-tester/resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :line 11, :column 6, :end-line 11, :end-column 27}}, should-be-localised {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/css-modules-tester/resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :line 24, :column 7, :end-line 24, :end-column 26, :arglists (quote ([selector]))}, :name cljs-css-modules.macro/should-be-localised, :variadic false, :file "resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :end-column 26, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector]))}, localise-selector {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/css-modules-tester/resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :line 30, :column 7, :end-line 30, :end-column 24, :arglists (quote ([id selector {:keys [regexp localise-fn]}]))}, :name cljs-css-modules.macro/localise-selector, :variadic false, :file "resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :end-column 24, :method-params ([id selector p__25103]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 3, :fn-var true, :arglists (quote ([id selector {:keys [regexp localise-fn]}]))}, get-selector-key {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/css-modules-tester/resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :line 34, :column 7, :end-line 34, :end-column 23, :arglists (quote ([selector {:keys [regexp name-template]}])), :doc "Return the key to use to retrieve the actual selector value"}, :name cljs-css-modules.macro/get-selector-key, :variadic false, :file "resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :end-column 23, :method-params ([selector p__25108]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector {:keys [regexp name-template]}])), :doc "Return the key to use to retrieve the actual selector value"}, get-selector-value {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/css-modules-tester/resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :line 41, :column 7, :end-line 41, :end-column 25, :arglists (quote ([selector {:keys [regexp value-template]}])), :doc "Return the actual selector value"}, :name cljs-css-modules.macro/get-selector-value, :variadic false, :file "resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :end-column 25, :method-params ([selector p__25113]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector {:keys [regexp value-template]}])), :doc "Return the actual selector value"}, process-style {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/css-modules-tester/resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :line 48, :column 7, :end-line 48, :end-column 20, :arglists (quote ([id style]))}, :name cljs-css-modules.macro/process-style, :variadic false, :file "resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :end-column 20, :method-params ([id style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id style]))}, create-garden-style {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/css-modules-tester/resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :line 65, :column 7, :end-line 65, :end-column 26, :arglists (quote ([item]))}, :name cljs-css-modules.macro/create-garden-style, :variadic false, :file "resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :end-column 26, :method-params ([item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([item]))}, create-map {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/css-modules-tester/resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :line 72, :column 7, :end-line 72, :end-column 17, :arglists (quote ([item]))}, :name cljs-css-modules.macro/create-map, :variadic false, :file "resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :end-column 17, :method-params ([item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([item]))}, defstyle {:protocol-inline nil, :meta {:file "/Users/gmp26/clojure/css-modules-tester/resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :line 78, :column 11, :end-line 78, :end-column 19, :macro true, :arglists (quote ([style-id style]))}, :name cljs-css-modules.macro/defstyle, :variadic false, :file "resources/public/js/compiled/devcards_out/cljs_css_modules/macro.cljc", :end-column 19, :method-params ([&form &env style-id style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :macro true, :end-line 78, :max-fixed-arity 4, :fn-var true, :arglists (quote ([style-id style]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:localise-fn :value-template :garden-style cljs.core/apply :localised-selector garden.core/css do :style-object-value :style-object-key :regexp :id :original-selector :name-template :localised def}, :order [:id :regexp :localise-fn :name-template :value-template :localised :original-selector :localised-selector :style-object-key :style-object-value :garden-style do def cljs.core/apply garden.core/css]}, :doc nil}